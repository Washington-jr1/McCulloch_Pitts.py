import random

class PerceptronBipolar:
    def __init__(self, input_size, learning_rate=0.1):
        self.input_size = input_size
        self.learning_rate = learning_rate
        self.weights = [random.uniform(-1, 1) for _ in range(input_size)]
        self.bias = random.uniform(-1, 1)

    def activation(self, x):
        return 1 if x >= 0 else -1  # Função de ativação bipolar

    def predict(self, inputs):
        weighted_sum = sum(w * i for w, i in zip(self.weights, inputs)) + self.bias
        return self.activation(weighted_sum)

    def train(self, training_data, labels, max_epochs=100):
        for epoch in range(max_epochs):
            errors = 0
            for inputs, label in zip(training_data, labels):
                prediction = self.predict(inputs)
                error = label - prediction

                # Ajusta pesos e bias
                if error != 0:
                    self.weights = [
                        w + self.learning_rate * error * i
                        for w, i in zip(self.weights, inputs)
                    ]
                    self.bias += self.learning_rate * error
                    errors += 1

            print(f"Época {epoch+1} - Erros: {errors}")
            if errors == 0:
                break
